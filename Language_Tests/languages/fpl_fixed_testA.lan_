Expression E ::= x | (abs T (x)E) | (app E E) | (zero ) | (succ E) | (floatNum E E) | (ref E) | (deref E) | (assign E E) | (error E) | (label L)
Type T ::= (int ) | (float ) | (arrow T T) | (refType T)
Value V ::= (abs T1 R2) | (zero ) | (pair V1 V2) | (succ V1) | (tt ) | (ff ) | (inl V1) | (inr V1) | (emptyList ) | (cons V1 V2) | (absT R1) | (fold V1 U2)
Label L ::= (l1 ) | (l2 ) | (l3 ) | (l4 )
Error ::= (error V1)
Heap H ::= (map L V) 
Context C ::= [] | (app C e) | (app v C) | (succ C) | (ref C) | (deref C) | (assign C e) | (assign v C) | (error C) 

Gamma | Sigma |- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 | Sigma |- R : T2.

Gamma | Sigma |- (app E1 E2) : T2 <== Gamma | Sigma |- E1 : (arrow T1 T2) /\ Gamma | Sigma |- E2 : T1.

Gamma | Sigma |- (zero ) : (int ).

Gamma | Sigma |- (succ E) : (int ) <== Gamma | Sigma |- E : (int ). 

Gamma | Sigma |- (floatNum E1 E2) : (float ) <== Gamma | Sigma |- E1 : (int ) /\ Gamma | Sigma |- E2 : (int ).

Gamma | Sigma |- (ref E) : (refType T) <== Gamma | Sigma |- E : T.

Gamma | Sigma |- (deref E) : T <== Gamma | Sigma |- E : (refType T).

Gamma | Sigma |- (assign E1 E2) : T <== Gamma | Sigma |- E1 : (refType T) /\ Gamma | Sigma |- E2 : T. 

Gamma | Sigma |- (error E) : T <== Gamma | Sigma |- E : T.


(app (abs T R) V) ; H --> R[V/x] ; H <== value V.

(ref V1)  ; H --> L ; H <== value V1 /\ (fresh H V1 L). 

(deref L)  ; H --> V ; H <== (lookup H L V). 

(assign L V)  ; H1 --> V ; H2 <== (update H1 L V H2). 


(int ) <: (int ).
(float ) <: (float ).
(int ) <: (float ).

(arrow T1 T2) <: (arrow T3 T4) <== T3 <: T1 /\ T2 <: T4. 
(refType T1) <: (refType T2) <== T1 <: T2. 


