=== QUERY 1: TABLE ===
opname		count

abs		1
inl		1
inr		1
app		1
case		1



=== QUERY 2: TABLE ===
val		type

inr		sum
inl		sum
abs		arrow



=== QUERY 3: TABLE ===
opname

app
case
case



=== QUERY 4: EMPTY TABLE ===



=== QUERY 5: EMPTY TABLE ===



=== QUERY 6: EMPTY TABLE ===



=== QUERY 7: TABLE ===
rulename		predname		args		role

rule8		value		[V]		PREM
rule8		step		[(case (inr V) R1 R2) ; R2[V/x]]		CONCL
rule7		value		[V]		PREM
rule7		step		[(case (inl V) R1 R2) ; R1[V/x]]		CONCL
rule6		typeOf		[(gammaAddx T2) ; R2 ; T]		PREM
rule6		typeOf		[(gammaAddx T1) ; R1 ; T]		PREM
rule6		typeOf		[Gamma ; EE ; (sum T1 T2)]		PREM
rule6		typeOf		[Gamma ; (case EE R1 R2) ; T]		CONCL
rule5		value		[V]		PREM
rule5		step		[(app (abs T R) V) ; R[V/x]]		CONCL
rule4		typeOf		[Gamma ; E2 ; T1]		PREM
rule4		typeOf		[Gamma ; E1 ; (arrow T1 T2)]		PREM
rule4		typeOf		[Gamma ; (app E1 E2) ; T2]		CONCL
rule3		typeOf		[Gamma ; E ; T2]		PREM
rule3		typeOf		[Gamma ; (inr E) ; (sum T1 T2)]		CONCL
rule2		typeOf		[Gamma ; E ; T1]		PREM
rule2		typeOf		[Gamma ; (inl E) ; (sum T1 T2)]		CONCL
rule1		typeOf		[(gammaAddx T1) ; R ; T2]		PREM
rule1		typeOf		[Gamma ; (abs T1 R) ; (arrow T1 T2)]		CONCL
app1		value		[E0]		PREM
case0		step		[E0 ; E0']		PREM
app1		step		[E1 ; E1']		PREM
app2		step		[E0 ; E0']		PREM
inr3		step		[E0 ; E0']		PREM
inl4		step		[E0 ; E0']		PREM
case0		step		[(case E0 (x)E1 (x)E2) ; (case E0' (x)E1 (x)E2)]		CONCL
app1		step		[(app E0 E1) ; (app E0 E1')]		CONCL
app2		step		[(app E0 E1) ; (app E0' E1)]		CONCL
inr3		step		[(inr E0) ; (inr E0')]		CONCL
inl4		step		[(inl E0) ; (inl E0')]		CONCL



=== QUERY 8: TABLE ===
opname

sum
sum
arrow
arrow



=== QUERY 9: EMPTY TABLE ===

